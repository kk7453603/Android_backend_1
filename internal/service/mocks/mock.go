// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "auth_service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockRepository) ChangePassword(login, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", login, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockRepositoryMockRecorder) ChangePassword(login, oldPassword, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockRepository)(nil).ChangePassword), login, oldPassword, newPassword)
}

// CheckUser mocks base method.
func (m *MockRepository) CheckUser(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockRepositoryMockRecorder) CheckUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockRepository)(nil).CheckUser), arg0, arg1)
}

// ConfirmCode mocks base method.
func (m *MockRepository) ConfirmCode(code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmCode", code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmCode indicates an expected call of ConfirmCode.
func (mr *MockRepositoryMockRecorder) ConfirmCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmCode", reflect.TypeOf((*MockRepository)(nil).ConfirmCode), code)
}

// ConfirmEmail mocks base method.
func (m *MockRepository) ConfirmEmail(newEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmEmail", newEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmEmail indicates an expected call of ConfirmEmail.
func (mr *MockRepositoryMockRecorder) ConfirmEmail(newEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmEmail", reflect.TypeOf((*MockRepository)(nil).ConfirmEmail), newEmail)
}

// GetToken mocks base method.
func (m *MockRepository) GetToken(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockRepositoryMockRecorder) GetToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockRepository)(nil).GetToken), arg0, arg1)
}

// InsertUser mocks base method.
func (m *MockRepository) InsertUser(arg0 models.UserToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockRepositoryMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockRepository)(nil).InsertUser), arg0)
}

// RecoverPassword mocks base method.
func (m *MockRepository) RecoverPassword(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverPassword", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverPassword indicates an expected call of RecoverPassword.
func (mr *MockRepositoryMockRecorder) RecoverPassword(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverPassword", reflect.TypeOf((*MockRepository)(nil).RecoverPassword), email)
}

// RegisterUser mocks base method.
func (m *MockRepository) RegisterUser(arg0 models.UserRegistration, arg1 models.UserToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockRepositoryMockRecorder) RegisterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockRepository)(nil).RegisterUser), arg0, arg1)
}

// RequestDeletion mocks base method.
func (m *MockRepository) RequestDeletion(login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestDeletion", login)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestDeletion indicates an expected call of RequestDeletion.
func (mr *MockRepositoryMockRecorder) RequestDeletion(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestDeletion", reflect.TypeOf((*MockRepository)(nil).RequestDeletion), login)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(arg0 models.UserToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), arg0)
}
